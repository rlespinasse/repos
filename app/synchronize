#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Load utility methods
. "$ROOT_DIR/utils"

syncRepository() {

    repo=$1
    site=$2
    name=$3
    root_folder=$4
    sitekey=$5

    REPODIR="${root_folder}/${site}/${name}/${repo}"
    repofull="${site}/${name}/${repo}"

    configexists=$(cli_call rc read '.sites["'"$sitekey"'"].config')
    if [ "$configexists" != "null" ]; then

        while IFS="=" read -r key value;
        do

            info "${repofull} - apply configuration $key = $value"
            git -C "${REPODIR}" config "$key" "$value"
        done < <(cli_call rc read '.sites["'"$sitekey"'"].config | to_entries[] | [.key, .value] | "\(.[0])=\(.[1])"' | sed '/^$/d')
    fi

    info "${repofull} - fetch origin"
    git -C "${REPODIR}" fetch origin -q --prune

    current_branch=$(git -C "${REPODIR}" rev-parse --abbrev-ref HEAD)

    info "${repofull} - pull origin/${current_branch}"
    git -C "${REPODIR}" add -A .
    stash_result=$(git -C "${REPODIR}" stash)
    git -C "${REPODIR}" pull -q origin "${current_branch}" >/dev/null 2>&1

    default_branch=$(git -C "${REPODIR}" symbolic-ref refs/remotes/origin/HEAD | sed 's/.*\///')
    if [ "${current_branch}" != "$default_branch" ]; then
        info "${repofull} - synchronize ${default_branch} branch"
        git -C "${REPODIR}" fetch -q origin "${default_branch}:${default_branch}"
    fi

    if [ "No local changes to save" != "$stash_result" ]; then

        info "${repofull} - unstash changes on ${current_branch}"
        git -C "${REPODIR}" stash pop -q
    fi

    info "${repofull} - prune"
    git -C "${REPODIR}" prune >/dev/null 2>&1

    info "${repofull} - gc"
    git -C "${REPODIR}" gc -q

    if [ "No local changes to save" != "$stash_result" ]; then

        if [ $pull_result -gt 0 ]; then

            info "${repofull} - complete, check your stashed changes"
        else

            info "${repofull} - complete, unstash ok"
        fi
    else
        info "${repofull} - complete"
    fi
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then

    cli_call check configuration

    root_folder=$(cli_call rc read '.root_folder')
    root_folder="${root_folder/#\~/$HOME}"

    info "apply global configuration"
    while IFS="," read -r key value;
    do
        info "apply configuration $key = $value"
        git config --global "$key" "$value"
    done < <(cli_call rc read '.config | to_entries[] | [.key, .value]  | @csv' | sed 's/"//g;/^$/d')


    while read -r sitekey;
    do
        while IFS="," read -r name site api nametype token;
        do

            all_repos=$(curl -s "${api}/${nametype}/${name}/repos?access_token=${token}&per_page=100" | jq -r ".[].name" | sort)
            while read -r repo;
            do

                mkdir -p "${root_folder}/${site}/${name}"
                if [ -d "${root_folder}/${site}/${name}/${repo}" ];
                then

                    includerepos=$(cli_call rc read '.sites["'"$sitekey"'"].repositories.include')
                    excluderepos=$(cli_call rc read '.sites["'"$sitekey"'"].repositories.exclude')

                    status="excluded"
                    if [ "$includerepos" == "[]" ] && [ "$excluderepos" == "[]" ];
                    then
                        status="synchronize_it"
                    else
                        includerepo=$(cli_call rc read '.sites["'"$sitekey"'"].repositories | select(.include[] | contains ("'"$repo"'"))' | sed '/^$/d')
                        excluderepo=$(cli_call rc read '.sites["'"$sitekey"'"].repositories | select(.exclude[] | contains ("'"$repo"'"))' | sed '/^$/d')
                        if [ -z "$excluderepo" ] && [ -n "$includerepo" ]; then
                            status="synchronize_it"
                        fi
                    fi

                    if [ "$status" == "synchronize_it" ]; then
                        syncRepository "$repo" "${site}" "${name}" "${root_folder}" "${sitekey}" &
                    elif [ "$status" == "excluded" ]; then
                        warning "${site}/${name}/${repo} excluded"
                    fi
                fi
            done < <(echo "${all_repos}")
        done < <(cli_call rc read '.sites["'"$sitekey"'"] | [.owner, .site, .api, .type, .token] | join(",")')
    done < <(cli_call rc read '.sites | to_entries[] | .key' | sed '/^$/d')


    for job in $(jobs -p)
    do
        wait "$job" || true
    done
fi
